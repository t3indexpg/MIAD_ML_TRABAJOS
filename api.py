# -*- coding: utf-8 -*-
"""Api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fLWTv9EircoE0Khd-_o-7YwZss44z-G5
"""

#!/usr/bin/python
from flask import Flask, request
import joblib
import pandas as pd
import json

# Cargar el modelo entrenado
modelo = joblib.load('modelo_lr.pkl')

# Variables que usa el modelo
selected_features = [
    'acousticness',
    'danceability',
    'energy',
    'loudness',
    'instrumentalness',
]

app = Flask(__name__)

@app.route('/predict', methods=['GET'])
def predict():
    # Recibir los par치metros de la URL (query parameters)
    acousticness = request.args.get('acousticness', type=float)
    danceability = request.args.get('danceability', type=float)
    energy = request.args.get('energy', type=float)
    loudness = request.args.get('loudness', type=float)
    instrumentalness = request.args.get('instrumentalness', type=float)
    
    # Verificar si todos los par치metros fueron recibidos
    if None in [acousticness, danceability, energy, loudness, instrumentalness]:
        return json.dumps({"error": "Faltan par치metros"}), 400, {'Content-Type': 'application/json'}
    
    # Crear un DataFrame con los valores recibidos
    X_new = pd.DataFrame({
        'acousticness': [acousticness],
        'danceability': [danceability],
        'energy': [energy],
        'loudness': [loudness],
        'instrumentalness': [instrumentalness],
    })
    
    # Hacer la predicci칩n
    predicciones = modelo.predict(X_new)
    
    # Devolver las predicciones
    return json.dumps({'predicted_popularity': predicciones.tolist()}), 200, {'Content-Type': 'application/json'}

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)


